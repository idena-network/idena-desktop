/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.models.ProtoAd', null, global);
goog.exportSymbol('proto.models.ProtoAdBurnKey', null, global);
goog.exportSymbol('proto.models.ProtoAdTarget', null, global);
goog.exportSymbol('proto.models.ProtoAdVotingParams', null, global);
goog.exportSymbol('proto.models.ProtoBurnAttachment', null, global);
goog.exportSymbol('proto.models.ProtoCallContractAttachment', null, global);
goog.exportSymbol('proto.models.ProtoChangeProfileAttachment', null, global);
goog.exportSymbol('proto.models.ProtoDeleteFlipAttachment', null, global);
goog.exportSymbol('proto.models.ProtoDeployContractAttachment', null, global);
goog.exportSymbol('proto.models.ProtoFlipKey', null, global);
goog.exportSymbol('proto.models.ProtoFlipKey.Data', null, global);
goog.exportSymbol('proto.models.ProtoFlipPrivateKeys', null, global);
goog.exportSymbol('proto.models.ProtoFlipSubmitAttachment', null, global);
goog.exportSymbol('proto.models.ProtoIpfsFlip', null, global);
goog.exportSymbol('proto.models.ProtoLongAnswerAttachment', null, global);
goog.exportSymbol('proto.models.ProtoOnlineStatusAttachment', null, global);
goog.exportSymbol('proto.models.ProtoPrivateFlipKeysPackage', null, global);
goog.exportSymbol('proto.models.ProtoPrivateFlipKeysPackage.Data', null, global);
goog.exportSymbol('proto.models.ProtoProfile', null, global);
goog.exportSymbol('proto.models.ProtoProfile.ProtoProfileAd', null, global);
goog.exportSymbol('proto.models.ProtoShortAnswerAttachment', null, global);
goog.exportSymbol('proto.models.ProtoStoreToIpfsAttachment', null, global);
goog.exportSymbol('proto.models.ProtoTerminateContractAttachment', null, global);
goog.exportSymbol('proto.models.ProtoTransaction', null, global);
goog.exportSymbol('proto.models.ProtoTransaction.Data', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoTransaction.displayName = 'proto.models.ProtoTransaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.models.ProtoTransaction.Data.toObject(includeInstance, f),
    signature: msg.getSignature_asB64(),
    userlp: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoTransaction}
 */
proto.models.ProtoTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoTransaction;
  return proto.models.ProtoTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoTransaction}
 */
proto.models.ProtoTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.models.ProtoTransaction.Data;
      reader.readMessage(value,proto.models.ProtoTransaction.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserlp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.models.ProtoTransaction.Data.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getUserlp();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoTransaction.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoTransaction.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoTransaction.Data.displayName = 'proto.models.ProtoTransaction.Data';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoTransaction.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoTransaction.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoTransaction.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoTransaction.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    to: msg.getTo_asB64(),
    amount: msg.getAmount_asB64(),
    maxfee: msg.getMaxfee_asB64(),
    tips: msg.getTips_asB64(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoTransaction.Data}
 */
proto.models.ProtoTransaction.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoTransaction.Data;
  return proto.models.ProtoTransaction.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoTransaction.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoTransaction.Data}
 */
proto.models.ProtoTransaction.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEpoch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMaxfee(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTips(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoTransaction.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoTransaction.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoTransaction.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoTransaction.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getMaxfee_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTips_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional uint32 nonce = 1;
 * @return {number}
 */
proto.models.ProtoTransaction.Data.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.models.ProtoTransaction.Data.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 epoch = 2;
 * @return {number}
 */
proto.models.ProtoTransaction.Data.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.models.ProtoTransaction.Data.prototype.setEpoch = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.models.ProtoTransaction.Data.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.models.ProtoTransaction.Data.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes to = 4;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoTransaction.Data.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes to = 4;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.models.ProtoTransaction.Data.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.models.ProtoTransaction.Data.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoTransaction.Data.prototype.setTo = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes amount = 5;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoTransaction.Data.prototype.getAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes amount = 5;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.models.ProtoTransaction.Data.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.models.ProtoTransaction.Data.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoTransaction.Data.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes maxFee = 6;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoTransaction.Data.prototype.getMaxfee = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes maxFee = 6;
 * This is a type-conversion wrapper around `getMaxfee()`
 * @return {string}
 */
proto.models.ProtoTransaction.Data.prototype.getMaxfee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMaxfee()));
};


/**
 * optional bytes maxFee = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMaxfee()`
 * @return {!Uint8Array}
 */
proto.models.ProtoTransaction.Data.prototype.getMaxfee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMaxfee()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoTransaction.Data.prototype.setMaxfee = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes tips = 7;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoTransaction.Data.prototype.getTips = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes tips = 7;
 * This is a type-conversion wrapper around `getTips()`
 * @return {string}
 */
proto.models.ProtoTransaction.Data.prototype.getTips_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTips()));
};


/**
 * optional bytes tips = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTips()`
 * @return {!Uint8Array}
 */
proto.models.ProtoTransaction.Data.prototype.getTips_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTips()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoTransaction.Data.prototype.setTips = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes payload = 8;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoTransaction.Data.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes payload = 8;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.models.ProtoTransaction.Data.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.models.ProtoTransaction.Data.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoTransaction.Data.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional Data data = 1;
 * @return {?proto.models.ProtoTransaction.Data}
 */
proto.models.ProtoTransaction.prototype.getData = function() {
  return /** @type{?proto.models.ProtoTransaction.Data} */ (
    jspb.Message.getWrapperField(this, proto.models.ProtoTransaction.Data, 1));
};


/** @param {?proto.models.ProtoTransaction.Data|undefined} value */
proto.models.ProtoTransaction.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.models.ProtoTransaction.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.models.ProtoTransaction.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoTransaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.models.ProtoTransaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.models.ProtoTransaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoTransaction.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool useRlp = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.models.ProtoTransaction.prototype.getUserlp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.models.ProtoTransaction.prototype.setUserlp = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoFlipPrivateKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.models.ProtoFlipPrivateKeys.repeatedFields_, null);
};
goog.inherits(proto.models.ProtoFlipPrivateKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoFlipPrivateKeys.displayName = 'proto.models.ProtoFlipPrivateKeys';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.models.ProtoFlipPrivateKeys.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoFlipPrivateKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoFlipPrivateKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoFlipPrivateKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoFlipPrivateKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: msg.getKeysList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoFlipPrivateKeys}
 */
proto.models.ProtoFlipPrivateKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoFlipPrivateKeys;
  return proto.models.ProtoFlipPrivateKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoFlipPrivateKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoFlipPrivateKeys}
 */
proto.models.ProtoFlipPrivateKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoFlipPrivateKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoFlipPrivateKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoFlipPrivateKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoFlipPrivateKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes keys = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.models.ProtoFlipPrivateKeys.prototype.getKeysList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes keys = 1;
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array.<string>}
 */
proto.models.ProtoFlipPrivateKeys.prototype.getKeysList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getKeysList()));
};


/**
 * repeated bytes keys = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.models.ProtoFlipPrivateKeys.prototype.getKeysList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getKeysList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.models.ProtoFlipPrivateKeys.prototype.setKeysList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.models.ProtoFlipPrivateKeys.prototype.addKeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.models.ProtoFlipPrivateKeys.prototype.clearKeysList = function() {
  this.setKeysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoPrivateFlipKeysPackage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoPrivateFlipKeysPackage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoPrivateFlipKeysPackage.displayName = 'proto.models.ProtoPrivateFlipKeysPackage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoPrivateFlipKeysPackage.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoPrivateFlipKeysPackage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoPrivateFlipKeysPackage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoPrivateFlipKeysPackage.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.models.ProtoPrivateFlipKeysPackage.Data.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoPrivateFlipKeysPackage}
 */
proto.models.ProtoPrivateFlipKeysPackage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoPrivateFlipKeysPackage;
  return proto.models.ProtoPrivateFlipKeysPackage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoPrivateFlipKeysPackage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoPrivateFlipKeysPackage}
 */
proto.models.ProtoPrivateFlipKeysPackage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.models.ProtoPrivateFlipKeysPackage.Data;
      reader.readMessage(value,proto.models.ProtoPrivateFlipKeysPackage.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoPrivateFlipKeysPackage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoPrivateFlipKeysPackage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoPrivateFlipKeysPackage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoPrivateFlipKeysPackage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.models.ProtoPrivateFlipKeysPackage.Data.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoPrivateFlipKeysPackage.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoPrivateFlipKeysPackage.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoPrivateFlipKeysPackage.Data.displayName = 'proto.models.ProtoPrivateFlipKeysPackage.Data';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoPrivateFlipKeysPackage.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoPrivateFlipKeysPackage.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_package: msg.getPackage_asB64(),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoPrivateFlipKeysPackage.Data}
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoPrivateFlipKeysPackage.Data;
  return proto.models.ProtoPrivateFlipKeysPackage.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoPrivateFlipKeysPackage.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoPrivateFlipKeysPackage.Data}
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPackage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoPrivateFlipKeysPackage.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoPrivateFlipKeysPackage.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPackage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes package = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.prototype.getPackage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes package = 1;
 * This is a type-conversion wrapper around `getPackage()`
 * @return {string}
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.prototype.getPackage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPackage()));
};


/**
 * optional bytes package = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPackage()`
 * @return {!Uint8Array}
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.prototype.getPackage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPackage()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoPrivateFlipKeysPackage.Data.prototype.setPackage = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 epoch = 2;
 * @return {number}
 */
proto.models.ProtoPrivateFlipKeysPackage.Data.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.models.ProtoPrivateFlipKeysPackage.Data.prototype.setEpoch = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Data data = 1;
 * @return {?proto.models.ProtoPrivateFlipKeysPackage.Data}
 */
proto.models.ProtoPrivateFlipKeysPackage.prototype.getData = function() {
  return /** @type{?proto.models.ProtoPrivateFlipKeysPackage.Data} */ (
    jspb.Message.getWrapperField(this, proto.models.ProtoPrivateFlipKeysPackage.Data, 1));
};


/** @param {?proto.models.ProtoPrivateFlipKeysPackage.Data|undefined} value */
proto.models.ProtoPrivateFlipKeysPackage.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.models.ProtoPrivateFlipKeysPackage.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.models.ProtoPrivateFlipKeysPackage.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoPrivateFlipKeysPackage.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.models.ProtoPrivateFlipKeysPackage.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.models.ProtoPrivateFlipKeysPackage.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoPrivateFlipKeysPackage.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoFlipKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoFlipKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoFlipKey.displayName = 'proto.models.ProtoFlipKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoFlipKey.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoFlipKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoFlipKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoFlipKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.models.ProtoFlipKey.Data.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoFlipKey}
 */
proto.models.ProtoFlipKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoFlipKey;
  return proto.models.ProtoFlipKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoFlipKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoFlipKey}
 */
proto.models.ProtoFlipKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.models.ProtoFlipKey.Data;
      reader.readMessage(value,proto.models.ProtoFlipKey.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoFlipKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoFlipKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoFlipKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoFlipKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.models.ProtoFlipKey.Data.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoFlipKey.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoFlipKey.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoFlipKey.Data.displayName = 'proto.models.ProtoFlipKey.Data';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoFlipKey.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoFlipKey.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoFlipKey.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoFlipKey.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoFlipKey.Data}
 */
proto.models.ProtoFlipKey.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoFlipKey.Data;
  return proto.models.ProtoFlipKey.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoFlipKey.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoFlipKey.Data}
 */
proto.models.ProtoFlipKey.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoFlipKey.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoFlipKey.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoFlipKey.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoFlipKey.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoFlipKey.Data.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.models.ProtoFlipKey.Data.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.models.ProtoFlipKey.Data.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoFlipKey.Data.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 epoch = 2;
 * @return {number}
 */
proto.models.ProtoFlipKey.Data.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.models.ProtoFlipKey.Data.prototype.setEpoch = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Data data = 1;
 * @return {?proto.models.ProtoFlipKey.Data}
 */
proto.models.ProtoFlipKey.prototype.getData = function() {
  return /** @type{?proto.models.ProtoFlipKey.Data} */ (
    jspb.Message.getWrapperField(this, proto.models.ProtoFlipKey.Data, 1));
};


/** @param {?proto.models.ProtoFlipKey.Data|undefined} value */
proto.models.ProtoFlipKey.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.models.ProtoFlipKey.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.models.ProtoFlipKey.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoFlipKey.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.models.ProtoFlipKey.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.models.ProtoFlipKey.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoFlipKey.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoShortAnswerAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoShortAnswerAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoShortAnswerAttachment.displayName = 'proto.models.ProtoShortAnswerAttachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoShortAnswerAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoShortAnswerAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoShortAnswerAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoShortAnswerAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    answers: msg.getAnswers_asB64(),
    rnd: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    clienttype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoShortAnswerAttachment}
 */
proto.models.ProtoShortAnswerAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoShortAnswerAttachment;
  return proto.models.ProtoShortAnswerAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoShortAnswerAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoShortAnswerAttachment}
 */
proto.models.ProtoShortAnswerAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAnswers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRnd(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoShortAnswerAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoShortAnswerAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoShortAnswerAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoShortAnswerAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswers_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRnd();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getClienttype();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes answers = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoShortAnswerAttachment.prototype.getAnswers = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes answers = 1;
 * This is a type-conversion wrapper around `getAnswers()`
 * @return {string}
 */
proto.models.ProtoShortAnswerAttachment.prototype.getAnswers_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAnswers()));
};


/**
 * optional bytes answers = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnswers()`
 * @return {!Uint8Array}
 */
proto.models.ProtoShortAnswerAttachment.prototype.getAnswers_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAnswers()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoShortAnswerAttachment.prototype.setAnswers = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 rnd = 2;
 * @return {string}
 */
proto.models.ProtoShortAnswerAttachment.prototype.getRnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.models.ProtoShortAnswerAttachment.prototype.setRnd = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint32 clientType = 3;
 * @return {number}
 */
proto.models.ProtoShortAnswerAttachment.prototype.getClienttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.models.ProtoShortAnswerAttachment.prototype.setClienttype = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoLongAnswerAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoLongAnswerAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoLongAnswerAttachment.displayName = 'proto.models.ProtoLongAnswerAttachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoLongAnswerAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoLongAnswerAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoLongAnswerAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoLongAnswerAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    answers: msg.getAnswers_asB64(),
    proof: msg.getProof_asB64(),
    key: msg.getKey_asB64(),
    salt: msg.getSalt_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoLongAnswerAttachment}
 */
proto.models.ProtoLongAnswerAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoLongAnswerAttachment;
  return proto.models.ProtoLongAnswerAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoLongAnswerAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoLongAnswerAttachment}
 */
proto.models.ProtoLongAnswerAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAnswers(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoLongAnswerAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoLongAnswerAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoLongAnswerAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoLongAnswerAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswers_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes answers = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getAnswers = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes answers = 1;
 * This is a type-conversion wrapper around `getAnswers()`
 * @return {string}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getAnswers_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAnswers()));
};


/**
 * optional bytes answers = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnswers()`
 * @return {!Uint8Array}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getAnswers_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAnswers()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoLongAnswerAttachment.prototype.setAnswers = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes proof = 2;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof = 2;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoLongAnswerAttachment.prototype.setProof = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key = 3;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoLongAnswerAttachment.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes salt = 4;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes salt = 4;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.models.ProtoLongAnswerAttachment.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoLongAnswerAttachment.prototype.setSalt = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoIpfsFlip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoIpfsFlip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoIpfsFlip.displayName = 'proto.models.ProtoIpfsFlip';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoIpfsFlip.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoIpfsFlip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoIpfsFlip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoIpfsFlip.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64(),
    publicpart: msg.getPublicpart_asB64(),
    privatepart: msg.getPrivatepart_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoIpfsFlip}
 */
proto.models.ProtoIpfsFlip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoIpfsFlip;
  return proto.models.ProtoIpfsFlip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoIpfsFlip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoIpfsFlip}
 */
proto.models.ProtoIpfsFlip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicpart(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrivatepart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoIpfsFlip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoIpfsFlip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoIpfsFlip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoIpfsFlip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicpart_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPrivatepart_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes pubKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoIpfsFlip.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubKey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.models.ProtoIpfsFlip.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.models.ProtoIpfsFlip.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoIpfsFlip.prototype.setPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes publicPart = 2;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoIpfsFlip.prototype.getPublicpart = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes publicPart = 2;
 * This is a type-conversion wrapper around `getPublicpart()`
 * @return {string}
 */
proto.models.ProtoIpfsFlip.prototype.getPublicpart_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicpart()));
};


/**
 * optional bytes publicPart = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicpart()`
 * @return {!Uint8Array}
 */
proto.models.ProtoIpfsFlip.prototype.getPublicpart_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicpart()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoIpfsFlip.prototype.setPublicpart = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes privatePart = 3;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoIpfsFlip.prototype.getPrivatepart = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes privatePart = 3;
 * This is a type-conversion wrapper around `getPrivatepart()`
 * @return {string}
 */
proto.models.ProtoIpfsFlip.prototype.getPrivatepart_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrivatepart()));
};


/**
 * optional bytes privatePart = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivatepart()`
 * @return {!Uint8Array}
 */
proto.models.ProtoIpfsFlip.prototype.getPrivatepart_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrivatepart()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoIpfsFlip.prototype.setPrivatepart = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoFlipSubmitAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoFlipSubmitAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoFlipSubmitAttachment.displayName = 'proto.models.ProtoFlipSubmitAttachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoFlipSubmitAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoFlipSubmitAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoFlipSubmitAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoFlipSubmitAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64(),
    pair: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoFlipSubmitAttachment}
 */
proto.models.ProtoFlipSubmitAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoFlipSubmitAttachment;
  return proto.models.ProtoFlipSubmitAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoFlipSubmitAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoFlipSubmitAttachment}
 */
proto.models.ProtoFlipSubmitAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPair(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoFlipSubmitAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoFlipSubmitAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoFlipSubmitAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoFlipSubmitAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPair();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoFlipSubmitAttachment.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.models.ProtoFlipSubmitAttachment.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.models.ProtoFlipSubmitAttachment.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoFlipSubmitAttachment.prototype.setCid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 pair = 2;
 * @return {number}
 */
proto.models.ProtoFlipSubmitAttachment.prototype.getPair = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.models.ProtoFlipSubmitAttachment.prototype.setPair = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoDeleteFlipAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoDeleteFlipAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoDeleteFlipAttachment.displayName = 'proto.models.ProtoDeleteFlipAttachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoDeleteFlipAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoDeleteFlipAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoDeleteFlipAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoDeleteFlipAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoDeleteFlipAttachment}
 */
proto.models.ProtoDeleteFlipAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoDeleteFlipAttachment;
  return proto.models.ProtoDeleteFlipAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoDeleteFlipAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoDeleteFlipAttachment}
 */
proto.models.ProtoDeleteFlipAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoDeleteFlipAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoDeleteFlipAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoDeleteFlipAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoDeleteFlipAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoDeleteFlipAttachment.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.models.ProtoDeleteFlipAttachment.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.models.ProtoDeleteFlipAttachment.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoDeleteFlipAttachment.prototype.setCid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoOnlineStatusAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoOnlineStatusAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoOnlineStatusAttachment.displayName = 'proto.models.ProtoOnlineStatusAttachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoOnlineStatusAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoOnlineStatusAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoOnlineStatusAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoOnlineStatusAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    online: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoOnlineStatusAttachment}
 */
proto.models.ProtoOnlineStatusAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoOnlineStatusAttachment;
  return proto.models.ProtoOnlineStatusAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoOnlineStatusAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoOnlineStatusAttachment}
 */
proto.models.ProtoOnlineStatusAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoOnlineStatusAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoOnlineStatusAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoOnlineStatusAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoOnlineStatusAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool online = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.models.ProtoOnlineStatusAttachment.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.models.ProtoOnlineStatusAttachment.prototype.setOnline = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoDeployContractAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.models.ProtoDeployContractAttachment.repeatedFields_, null);
};
goog.inherits(proto.models.ProtoDeployContractAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoDeployContractAttachment.displayName = 'proto.models.ProtoDeployContractAttachment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.models.ProtoDeployContractAttachment.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoDeployContractAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoDeployContractAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoDeployContractAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoDeployContractAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    codehash: msg.getCodehash_asB64(),
    argsList: msg.getArgsList_asB64(),
    clienttype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoDeployContractAttachment}
 */
proto.models.ProtoDeployContractAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoDeployContractAttachment;
  return proto.models.ProtoDeployContractAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoDeployContractAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoDeployContractAttachment}
 */
proto.models.ProtoDeployContractAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCodehash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addArgs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoDeployContractAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoDeployContractAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoDeployContractAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoDeployContractAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getArgsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getClienttype();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes CodeHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoDeployContractAttachment.prototype.getCodehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes CodeHash = 1;
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {string}
 */
proto.models.ProtoDeployContractAttachment.prototype.getCodehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCodehash()));
};


/**
 * optional bytes CodeHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {!Uint8Array}
 */
proto.models.ProtoDeployContractAttachment.prototype.getCodehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCodehash()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoDeployContractAttachment.prototype.setCodehash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes args = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.models.ProtoDeployContractAttachment.prototype.getArgsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes args = 2;
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array.<string>}
 */
proto.models.ProtoDeployContractAttachment.prototype.getArgsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getArgsList()));
};


/**
 * repeated bytes args = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.models.ProtoDeployContractAttachment.prototype.getArgsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getArgsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.models.ProtoDeployContractAttachment.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.models.ProtoDeployContractAttachment.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.models.ProtoDeployContractAttachment.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * optional uint32 clientType = 3;
 * @return {number}
 */
proto.models.ProtoDeployContractAttachment.prototype.getClienttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.models.ProtoDeployContractAttachment.prototype.setClienttype = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoCallContractAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.models.ProtoCallContractAttachment.repeatedFields_, null);
};
goog.inherits(proto.models.ProtoCallContractAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoCallContractAttachment.displayName = 'proto.models.ProtoCallContractAttachment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.models.ProtoCallContractAttachment.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoCallContractAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoCallContractAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoCallContractAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoCallContractAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argsList: msg.getArgsList_asB64(),
    clienttype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoCallContractAttachment}
 */
proto.models.ProtoCallContractAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoCallContractAttachment;
  return proto.models.ProtoCallContractAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoCallContractAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoCallContractAttachment}
 */
proto.models.ProtoCallContractAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addArgs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoCallContractAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoCallContractAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoCallContractAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoCallContractAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getClienttype();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.models.ProtoCallContractAttachment.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.models.ProtoCallContractAttachment.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated bytes args = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.models.ProtoCallContractAttachment.prototype.getArgsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes args = 2;
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array.<string>}
 */
proto.models.ProtoCallContractAttachment.prototype.getArgsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getArgsList()));
};


/**
 * repeated bytes args = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.models.ProtoCallContractAttachment.prototype.getArgsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getArgsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.models.ProtoCallContractAttachment.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.models.ProtoCallContractAttachment.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.models.ProtoCallContractAttachment.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * optional uint32 clientType = 3;
 * @return {number}
 */
proto.models.ProtoCallContractAttachment.prototype.getClienttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.models.ProtoCallContractAttachment.prototype.setClienttype = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoTerminateContractAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.models.ProtoTerminateContractAttachment.repeatedFields_, null);
};
goog.inherits(proto.models.ProtoTerminateContractAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoTerminateContractAttachment.displayName = 'proto.models.ProtoTerminateContractAttachment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.models.ProtoTerminateContractAttachment.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoTerminateContractAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoTerminateContractAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoTerminateContractAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoTerminateContractAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    argsList: msg.getArgsList_asB64(),
    clienttype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoTerminateContractAttachment}
 */
proto.models.ProtoTerminateContractAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoTerminateContractAttachment;
  return proto.models.ProtoTerminateContractAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoTerminateContractAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoTerminateContractAttachment}
 */
proto.models.ProtoTerminateContractAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addArgs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoTerminateContractAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoTerminateContractAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoTerminateContractAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoTerminateContractAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArgsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getClienttype();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated bytes args = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.models.ProtoTerminateContractAttachment.prototype.getArgsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes args = 1;
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array.<string>}
 */
proto.models.ProtoTerminateContractAttachment.prototype.getArgsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getArgsList()));
};


/**
 * repeated bytes args = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.models.ProtoTerminateContractAttachment.prototype.getArgsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getArgsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.models.ProtoTerminateContractAttachment.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.models.ProtoTerminateContractAttachment.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.models.ProtoTerminateContractAttachment.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * optional uint32 clientType = 2;
 * @return {number}
 */
proto.models.ProtoTerminateContractAttachment.prototype.getClienttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.models.ProtoTerminateContractAttachment.prototype.setClienttype = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.models.ProtoProfile.repeatedFields_, null);
};
goog.inherits(proto.models.ProtoProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoProfile.displayName = 'proto.models.ProtoProfile';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.models.ProtoProfile.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    adsList: jspb.Message.toObjectList(msg.getAdsList(),
    proto.models.ProtoProfile.ProtoProfileAd.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoProfile}
 */
proto.models.ProtoProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoProfile;
  return proto.models.ProtoProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoProfile}
 */
proto.models.ProtoProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.models.ProtoProfile.ProtoProfileAd;
      reader.readMessage(value,proto.models.ProtoProfile.ProtoProfileAd.deserializeBinaryFromReader);
      msg.addAds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.models.ProtoProfile.ProtoProfileAd.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoProfile.ProtoProfileAd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoProfile.ProtoProfileAd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoProfile.ProtoProfileAd.displayName = 'proto.models.ProtoProfile.ProtoProfileAd';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoProfile.ProtoProfileAd.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoProfile.ProtoProfileAd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoProfile.ProtoProfileAd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoProfile.ProtoProfileAd.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    target: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 3, ""),
    author: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoProfile.ProtoProfileAd}
 */
proto.models.ProtoProfile.ProtoProfileAd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoProfile.ProtoProfileAd;
  return proto.models.ProtoProfile.ProtoProfileAd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoProfile.ProtoProfileAd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoProfile.ProtoProfileAd}
 */
proto.models.ProtoProfile.ProtoProfileAd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoProfile.ProtoProfileAd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoProfile.ProtoProfileAd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoProfile.ProtoProfileAd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoProfile.ProtoProfileAd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.models.ProtoProfile.ProtoProfileAd.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.models.ProtoProfile.ProtoProfileAd.prototype.setCid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string target = 2;
 * @return {string}
 */
proto.models.ProtoProfile.ProtoProfileAd.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.models.ProtoProfile.ProtoProfileAd.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contract = 3;
 * @return {string}
 */
proto.models.ProtoProfile.ProtoProfileAd.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.models.ProtoProfile.ProtoProfileAd.prototype.setContract = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string author = 4;
 * @return {string}
 */
proto.models.ProtoProfile.ProtoProfileAd.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.models.ProtoProfile.ProtoProfileAd.prototype.setAuthor = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated ProtoProfileAd ads = 1;
 * @return {!Array.<!proto.models.ProtoProfile.ProtoProfileAd>}
 */
proto.models.ProtoProfile.prototype.getAdsList = function() {
  return /** @type{!Array.<!proto.models.ProtoProfile.ProtoProfileAd>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.models.ProtoProfile.ProtoProfileAd, 1));
};


/** @param {!Array.<!proto.models.ProtoProfile.ProtoProfileAd>} value */
proto.models.ProtoProfile.prototype.setAdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.models.ProtoProfile.ProtoProfileAd=} opt_value
 * @param {number=} opt_index
 * @return {!proto.models.ProtoProfile.ProtoProfileAd}
 */
proto.models.ProtoProfile.prototype.addAds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.models.ProtoProfile.ProtoProfileAd, opt_index);
};


proto.models.ProtoProfile.prototype.clearAdsList = function() {
  this.setAdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoAd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoAd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoAd.displayName = 'proto.models.ProtoAd';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoAd.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoAd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoAd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoAd.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    thumb: msg.getThumb_asB64(),
    media: msg.getMedia_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 6, 0),
    votingparams: (f = msg.getVotingparams()) && proto.models.ProtoAdVotingParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoAd}
 */
proto.models.ProtoAd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoAd;
  return proto.models.ProtoAd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoAd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoAd}
 */
proto.models.ProtoAd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThumb(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMedia(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 7:
      var value = new proto.models.ProtoAdVotingParams;
      reader.readMessage(value,proto.models.ProtoAdVotingParams.deserializeBinaryFromReader);
      msg.setVotingparams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoAd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoAd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoAd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoAd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getThumb_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getMedia_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getVotingparams();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.models.ProtoAdVotingParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.models.ProtoAd.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.models.ProtoAd.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string desc = 2;
 * @return {string}
 */
proto.models.ProtoAd.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.models.ProtoAd.prototype.setDesc = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.models.ProtoAd.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.models.ProtoAd.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes thumb = 4;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoAd.prototype.getThumb = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes thumb = 4;
 * This is a type-conversion wrapper around `getThumb()`
 * @return {string}
 */
proto.models.ProtoAd.prototype.getThumb_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThumb()));
};


/**
 * optional bytes thumb = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThumb()`
 * @return {!Uint8Array}
 */
proto.models.ProtoAd.prototype.getThumb_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThumb()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoAd.prototype.setThumb = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes media = 5;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoAd.prototype.getMedia = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes media = 5;
 * This is a type-conversion wrapper around `getMedia()`
 * @return {string}
 */
proto.models.ProtoAd.prototype.getMedia_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMedia()));
};


/**
 * optional bytes media = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMedia()`
 * @return {!Uint8Array}
 */
proto.models.ProtoAd.prototype.getMedia_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMedia()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoAd.prototype.setMedia = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint32 version = 6;
 * @return {number}
 */
proto.models.ProtoAd.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.models.ProtoAd.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ProtoAdVotingParams votingParams = 7;
 * @return {?proto.models.ProtoAdVotingParams}
 */
proto.models.ProtoAd.prototype.getVotingparams = function() {
  return /** @type{?proto.models.ProtoAdVotingParams} */ (
    jspb.Message.getWrapperField(this, proto.models.ProtoAdVotingParams, 7));
};


/** @param {?proto.models.ProtoAdVotingParams|undefined} value */
proto.models.ProtoAd.prototype.setVotingparams = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.models.ProtoAd.prototype.clearVotingparams = function() {
  this.setVotingparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.models.ProtoAd.prototype.hasVotingparams = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoAdVotingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoAdVotingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoAdVotingParams.displayName = 'proto.models.ProtoAdVotingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoAdVotingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoAdVotingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoAdVotingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoAdVotingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingduration: jspb.Message.getFieldWithDefault(msg, 1, 0),
    publicvotingduration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    quorum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    committeesize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoAdVotingParams}
 */
proto.models.ProtoAdVotingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoAdVotingParams;
  return proto.models.ProtoAdVotingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoAdVotingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoAdVotingParams}
 */
proto.models.ProtoAdVotingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotingduration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPublicvotingduration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuorum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommitteesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoAdVotingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoAdVotingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoAdVotingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoAdVotingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingduration();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPublicvotingduration();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getQuorum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCommitteesize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 votingDuration = 1;
 * @return {number}
 */
proto.models.ProtoAdVotingParams.prototype.getVotingduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.models.ProtoAdVotingParams.prototype.setVotingduration = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 publicVotingDuration = 2;
 * @return {number}
 */
proto.models.ProtoAdVotingParams.prototype.getPublicvotingduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.models.ProtoAdVotingParams.prototype.setPublicvotingduration = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 quorum = 3;
 * @return {number}
 */
proto.models.ProtoAdVotingParams.prototype.getQuorum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.models.ProtoAdVotingParams.prototype.setQuorum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 committeeSize = 4;
 * @return {number}
 */
proto.models.ProtoAdVotingParams.prototype.getCommitteesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.models.ProtoAdVotingParams.prototype.setCommitteesize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoAdTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoAdTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoAdTarget.displayName = 'proto.models.ProtoAdTarget';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoAdTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoAdTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoAdTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoAdTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getFieldWithDefault(msg, 1, ""),
    age: jspb.Message.getFieldWithDefault(msg, 2, 0),
    os: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stake: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoAdTarget}
 */
proto.models.ProtoAdTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoAdTarget;
  return proto.models.ProtoAdTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoAdTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoAdTarget}
 */
proto.models.ProtoAdTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoAdTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoAdTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoAdTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoAdTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStake();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string language = 1;
 * @return {string}
 */
proto.models.ProtoAdTarget.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.models.ProtoAdTarget.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 age = 2;
 * @return {number}
 */
proto.models.ProtoAdTarget.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.models.ProtoAdTarget.prototype.setAge = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string os = 3;
 * @return {string}
 */
proto.models.ProtoAdTarget.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.models.ProtoAdTarget.prototype.setOs = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 stake = 4;
 * @return {number}
 */
proto.models.ProtoAdTarget.prototype.getStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.models.ProtoAdTarget.prototype.setStake = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoAdBurnKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoAdBurnKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoAdBurnKey.displayName = 'proto.models.ProtoAdBurnKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoAdBurnKey.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoAdBurnKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoAdBurnKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoAdBurnKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    target: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoAdBurnKey}
 */
proto.models.ProtoAdBurnKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoAdBurnKey;
  return proto.models.ProtoAdBurnKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoAdBurnKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoAdBurnKey}
 */
proto.models.ProtoAdBurnKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoAdBurnKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoAdBurnKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoAdBurnKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoAdBurnKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.models.ProtoAdBurnKey.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.models.ProtoAdBurnKey.prototype.setCid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string target = 2;
 * @return {string}
 */
proto.models.ProtoAdBurnKey.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.models.ProtoAdBurnKey.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoStoreToIpfsAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoStoreToIpfsAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoStoreToIpfsAttachment.displayName = 'proto.models.ProtoStoreToIpfsAttachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoStoreToIpfsAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoStoreToIpfsAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoStoreToIpfsAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoStoreToIpfsAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64(),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoStoreToIpfsAttachment}
 */
proto.models.ProtoStoreToIpfsAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoStoreToIpfsAttachment;
  return proto.models.ProtoStoreToIpfsAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoStoreToIpfsAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoStoreToIpfsAttachment}
 */
proto.models.ProtoStoreToIpfsAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoStoreToIpfsAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoStoreToIpfsAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoStoreToIpfsAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoStoreToIpfsAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoStoreToIpfsAttachment.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.models.ProtoStoreToIpfsAttachment.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.models.ProtoStoreToIpfsAttachment.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoStoreToIpfsAttachment.prototype.setCid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 size = 2;
 * @return {number}
 */
proto.models.ProtoStoreToIpfsAttachment.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.models.ProtoStoreToIpfsAttachment.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoChangeProfileAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoChangeProfileAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoChangeProfileAttachment.displayName = 'proto.models.ProtoChangeProfileAttachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoChangeProfileAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoChangeProfileAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoChangeProfileAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoChangeProfileAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoChangeProfileAttachment}
 */
proto.models.ProtoChangeProfileAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoChangeProfileAttachment;
  return proto.models.ProtoChangeProfileAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoChangeProfileAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoChangeProfileAttachment}
 */
proto.models.ProtoChangeProfileAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoChangeProfileAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoChangeProfileAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoChangeProfileAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoChangeProfileAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.models.ProtoChangeProfileAttachment.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.models.ProtoChangeProfileAttachment.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.models.ProtoChangeProfileAttachment.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/** @param {!(string|Uint8Array)} value */
proto.models.ProtoChangeProfileAttachment.prototype.setCid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.models.ProtoBurnAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.models.ProtoBurnAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.models.ProtoBurnAttachment.displayName = 'proto.models.ProtoBurnAttachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.models.ProtoBurnAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.models.ProtoBurnAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.models.ProtoBurnAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoBurnAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.models.ProtoBurnAttachment}
 */
proto.models.ProtoBurnAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.models.ProtoBurnAttachment;
  return proto.models.ProtoBurnAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.models.ProtoBurnAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.models.ProtoBurnAttachment}
 */
proto.models.ProtoBurnAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.models.ProtoBurnAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.models.ProtoBurnAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.models.ProtoBurnAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.models.ProtoBurnAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.models.ProtoBurnAttachment.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.models.ProtoBurnAttachment.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.models);
